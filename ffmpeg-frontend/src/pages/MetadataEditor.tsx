import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay"; // Added back
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button"; // Import Button
import { Loader2 } from "lucide-react"; // Import Loader2 icon
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor"; // Import the new hook
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer"; // Import the new component
import { toast } from "sonner"; // Import toast
import type { SingleFileCommandPayload } from "@/hooks/useFFmpegProcessor"; // Import payload type


const MetadataEditor = () => {
  // Use the new hook
  const {
    selectedFiles, // Keep selectedFiles from hook for UI logic
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    outputFile,
    isUploading,
    isProcessing,
    mediaError,
    generatedCommand, // Get the generated command from the hook
    handleFileSelect, // Use the hook's file select handler
    runCommand, // Use the hook's run command handler
    setCommand, // Use the hook's set command function
    setMediaError, // Pass the hook's setMediaError to the player
    uploadSingleFile, // Import the explicit upload function
  } = useFFmpegProcessor();

  const [metadata, setMetadata] = useState({ title: "", artist: "", album: "" }); // Basic metadata fields

  // Effect to generate command string for display whenever selectedFiles or metadata changes
  // This command string uses the *local* file name for display purposes.
  useEffect(() => {
      if (selectedFiles.length === 1 && (metadata.title || metadata.artist || metadata.album)) {
          generateDisplayCommandString(selectedFiles[0].name, metadata);
      } else {
          setCommand(""); // Clear command if requirements aren't met
      }
  }, [selectedFiles, metadata, setCommand]); // Add setCommand to dependencies


  const handleMetadataChange = (field: keyof typeof metadata, value: string) => {
    const updatedMetadata = { ...metadata, [field]: value };
    setMetadata(updatedMetadata);
    // Command will be regenerated by the useEffect hook
  };

  // Function to generate the command string for display (used by useEffect)
  // This uses the *local* file name for display purposes.
  const generateDisplayCommandString = (inputFilename: string, currentMetadata: typeof metadata) => {
    if (!inputFilename) {
      return ""; // Return empty string if command cannot be generated
    }

    const outputFile = `${inputFilename.split('.')[0]}_metadata.${inputFilename.split('.').pop()}`; // Simple output naming

    let command = `ffmpeg -i "${inputFilename}" -c copy`; // Use stream copy by default

    // Add metadata flags if fields are not empty
    if (currentMetadata.title) {
        command += ` -metadata title="${currentMetadata.title}"`;
    }
    if (currentMetadata.artist) {
        command += ` -metadata artist="${currentMetadata.artist}"`;
    }
    if (currentMetadata.album) {
        command += ` -metadata album="${currentMetadata.album}"`;
    }

    // Note: Editing chapters is more complex and often requires a metadata file.
    // This basic example focuses on simple key-value metadata.

    command += ` "${outputFile}"`;

    // Only set command if at least one metadata field is provided
    if (currentMetadata.title || currentMetadata.artist || currentMetadata.album) {
        setCommand(command); // Set the command using the hook's function
        return command; // Return the generated command string
    } else {
        setCommand("");
        return ""; // Return empty string if no metadata is provided
    }
  };

  // New handler for the Run button
  const handleRunClick = async () => {
      if (selectedFiles.length === 0) {
          toast.warning("Please select a file first.");
          return;
      }
      if (selectedFiles.length > 1) {
          toast.warning("Metadata Editing currently only supports a single file. Please select only one file.");
          return;
      }
      if (!metadata.title && !metadata.artist && !metadata.album) {
          toast.warning("Please enter at least one metadata field.");
          return;
      }

      // Explicitly trigger single file upload
      const uploadedFile = await uploadSingleFile(selectedFiles[0]);

      if (uploadedFile) {
          // Construct the actual command payload using the *uploaded* filename
          const actualCommand = generateDisplayCommandString(uploadedFile, metadata); // Reuse logic, but pass uploadedFile

          // Check if command was successfully generated (e.g., if required fields were missing)
          if (!actualCommand) {
              toast.error("Could not generate command. Please check your options.");
              return;
          }

          const payload: SingleFileCommandPayload = {
              command: actualCommand,
              inputFile: uploadedFile, // Use the uploaded filename
          };
          runCommand(payload); // Run the command via the hook
      }
  };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Metadata & Chapters Editor</h2>
        <p className="text-muted-foreground">View and edit basic metadata for media files.</p>

        {/* Use the hook's file select handler */}
        <FileUploader onFileSelect={handleFileSelect} />

        {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Metadata Options</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">

               {isUploading && (
                   <p className="text-sm text-blue-600">Uploading file...</p>
               )}

               {/* Render options only after initial file selection and not uploading */}
               {!isUploading && selectedFiles.length > 0 && (
                   <>
                       {/* Display selected files */}
                       <div>
                           <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                           <ul>
                               {selectedFiles.map((file, index) => (
                                   <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                               ))}
                           </ul>
                       </div>

                       {selectedFiles.length > 1 && (
                           <p className="text-sm text-yellow-600">Note: Metadata editing currently only applies to the first selected file.</p>
                       )}

                       <p className="text-sm text-muted-foreground">
                           Select a file above and enter metadata below to generate the FFmpeg command.
                       </p>
                       <div className="grid w-full max-w-md items-center gap-1.5">
                         <Label htmlFor="metadata-title">Title</Label>
                         <Input
                           id="metadata-title"
                           type="text"
                           placeholder="Enter title"
                           value={metadata.title}
                           onChange={(e) => handleMetadataChange("title", e.target.value)}
                           disabled={isProcessing || isUploading}
                         />
                       </div>
                        <div className="grid w-full max-w-md items-center gap-1.5">
                         <Label htmlFor="metadata-artist">Artist</Label>
                         <Input
                           id="metadata-artist"
                           type="text"
                           placeholder="Enter artist"
                           value={metadata.artist}
                           onChange={(e) => handleMetadataChange("artist", e.target.value)}
                           disabled={isProcessing || isUploading}
                         />
                       </div>
                        <div className="grid w-full max-w-md items-center gap-1.5">
                         <Label htmlFor="metadata-album">Album</Label>
                         <Input
                           id="metadata-album"
                           type="text"
                           placeholder="Enter album"
                           value={metadata.album}
                           onChange={(e) => handleMetadataChange("album", e.target.value)}
                           disabled={isProcessing || isUploading}
                         />
                       </div>

                       {/* Run Button - uses the new handleRunClick */}
                       <Button
                           onClick={handleRunClick} // Use the new handler
                           disabled={(!metadata.title && !metadata.artist && !metadata.album) || selectedFiles.length === 0 || isProcessing || isUploading} // Disable if no metadata, no file, processing, or uploading
                       >
                           {isProcessing ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Processing...
                               </>
                           ) : isUploading ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Uploading...
                               </>
                           ) : (
                               "Run Metadata Update"
                           )}
                       </Button>
                       <p className="text-sm text-yellow-600">
                           Note: Clicking "Run" will first upload the selected file and then send the command to your local backend server running on http://localhost:8200.
                           Ensure your backend is running and has access to the selected file.
                       </p>
                       <p className="text-sm text-yellow-600">
                           Note: This tool only generates the FFmpeg command. Executing the command requires FFmpeg installed on your system. Editing chapters is not supported in this basic version.
                       </p>
                   </>
               )}

            </CardContent>
          </Card>
        )}

        {/* Use the new OutputMediaPlayer component */}
        <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} />

        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

      </div>
    </MainLayout>
  );
};

export default MetadataEditor;