import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay"; // Added back
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button"; // Import Button
import { Loader2 } from "lucide-react"; // Import Loader2 icon
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor"; // Import the new hook
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer"; // Keep for consistency, though no media output
import { toast } from "sonner"; // Import toast
import type { SingleFileCommandPayload } from "@/hooks/useFFmpegProcessor"; // Import payload type


const LiveStreamManager = () => {
  // Use the new hook
  const {
    selectedFiles, // Keep selectedFiles from hook for UI logic
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    outputFile, // Live streaming doesn't produce an output file in this flow, but keep for consistency
    isUploading,
    isProcessing, // Processing state can indicate streaming is attempting to start
    mediaError, // Keep for consistency, though less relevant for streaming command generation
    generatedCommand, // Get the generated command from the hook
    handleFileSelect, // Use the hook's file select handler
    runCommand, // Use the hook's run command handler
    setCommand, // Use the hook's set command function
    setMediaError, // Keep for consistency
    uploadSingleFile, // Import the explicit upload function
  } = useFFmpegProcessor();

  const [rtmpUrl, setRtmpUrl] = useState<string>("");
  // Removed activeTab state as there's only one tab now
  // const [activeTab, setActiveTab] = useState<"file" | "device">("file"); // Focus on file streaming for now

  // Effect to generate command string for display whenever selectedFiles or rtmpUrl changes (only for file tab)
  // This command string uses the *local* file name for display purposes.
  useEffect(() => {
      // Command generation is now only for the file streaming case
      if (selectedFiles.length === 1 && rtmpUrl) {
          generateDisplayCommandString(selectedFiles[0].name, rtmpUrl);
      } else {
          setCommand(""); // Clear command if requirements aren't met
      }
  }, [selectedFiles, rtmpUrl, setCommand]); // Add setCommand to dependencies


  const handleRtmpUrlChange = (url: string) => {
    setRtmpUrl(url);
    // Command will be regenerated by the useEffect hook
  };

   // Removed handleTabChange as there's only one tab


  // Function to generate the command string for display (used by useEffect)
  // This uses the *local* file name for display purposes.
  const generateDisplayCommandString = (inputFilename: string, url: string) => {
    if (!inputFilename || !url) {
      return ""; // Return empty string if command cannot be generated
    }

    // Basic command generation for streaming a file via RTMP
    // -re: Read input at native frame rate (important for streaming)
    // -i: Input file
    // -c copy: Attempt to copy streams if compatible (fastest)
    // -f flv: Output format (FLV is common for RTMP)
    // url: The RTMP server URL
    const command = `ffmpeg -re -i "${inputFilename}" -c copy -f flv "${url}"`;

    setCommand(command); // Set the command using the hook's function
    return command; // Return the generated command string
  };

  // New handler for the Run button
  const handleRunClick = async () => {
      // No need to check activeTab anymore

      if (selectedFiles.length === 0) {
          toast.warning("Please select a file first.");
          return;
      }
      if (selectedFiles.length > 1) {
          toast.warning("Streaming from file currently only supports a single file. Please select only one file.");
          return;
      }
      if (!rtmpUrl) {
          toast.warning("Please enter an RTMP server URL.");
          return;
      }

      // Explicitly trigger single file upload
      const uploadedFile = await uploadSingleFile(selectedFiles[0]);

      if (uploadedFile) {
          // Construct the actual command payload using the *uploaded* filename
          const actualCommand = generateDisplayCommandString(uploadedFile, rtmpUrl); // Reuse logic, but pass uploadedFile

          const payload: SingleFileCommandPayload = {
              command: actualCommand,
              inputFile: uploadedFile, // Use the uploaded filename
          };
          // Note: Running a streaming command via the backend might keep the backend process running.
          // A real streaming feature would need more sophisticated backend handling (e.g., managing long-running processes).
          runCommand(payload); // Run the command via the hook
      }
  };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Live Streaming & Recording</h2>
        <p className="text-muted-foreground">Generate FFmpeg commands for streaming media.</p>

         {/* Removed Tabs component as there's only one section */}
         {/* <Tabs value={activeTab} onValueChange={(value: "file" | "device") => handleTabChange(value)} className="w-full"> */}
             {/* Removed TabsList */}
             {/* <TabsList className="grid w-full grid-cols-2 max-w-sm"> */}
                 {/* Removed device tab trigger */}
                 {/* <TabsTrigger value="file" disabled={isProcessing || isUploading}>Stream from File</TabsTrigger> */}
                 {/* <TabsTrigger value="device" disabled>Stream from Device (Coming Soon)</Tabs!) */}
             {/* </TabsList> */}
             {/* Kept only the file tab content */}
             {/* <TabsContent value="file" className="space-y-4 pt-4"> */}
                 <p className="text-sm text-muted-foreground">Select a media file and provide an RTMP URL to generate the streaming command.</p>
                 {/* Use the hook's file select handler */}
                 <FileUploader onFileSelect={handleFileSelect} />

                 {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
                     <Card className="w-full">
                         <CardHeader>
                             <CardTitle>Streaming Options</CardTitle>
                         </CardHeader>
                         <CardContent className="space-y-4">

                            {isUploading && (
                                <p className="text-sm text-blue-600">Uploading file...</p>
                            )}

                            {/* Render options only after initial file selection and not uploading */}
                            {!isUploading && selectedFiles.length > 0 && (
                                <>
                                    {/* Display selected files */}
                                    <div>
                                        <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                                        <ul>
                                            {selectedFiles.map((file, index) => (
                                                <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                                            ))}
                                        </ul>
                                    </div>

                                    {selectedFiles.length > 1 && (
                                        <p className="text-sm text-yellow-600">Note: Streaming from file currently only supports a single file. Only the first file will be processed.</p>
                                    )}

                                    <div className="grid w-full items-center gap-1.5">
                                        <Label htmlFor="rtmp-url">RTMP Server URL</Label>
                                        <Input
                                            id="rtmp-url"
                                            type="text"
                                            placeholder="e.g., rtmp://your-server/live/stream_key"
                                            value={rtmpUrl}
                                            onChange={(e) => handleRtmpUrlChange(e.target.value)}
                                            disabled={isProcessing || isUploading}
                                        />
                                    </div>

                                    {/* Run Button - uses the new handleRunClick */}
                                    <Button
                                        onClick={handleRunClick} // Use the new handler
                                        disabled={!rtmpUrl || selectedFiles.length === 0 || isProcessing || isUploading} // Disable if no URL, no file, processing, or uploading
                                    >
                                        {isProcessing ? (
                                            <>
                                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                                Streaming...
                                            </>
                                        ) : isUploading ? (
                                            <>
                                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                                Uploading...
                                            </>
                                        ) : (
                                            "Run Stream Command"
                                        )}
                                    </Button>
                                    <p className="text-sm text-yellow-600">
                                        Note: Clicking "Run" will first upload the selected file and then send the command to your local backend server running on http://localhost:8200.
                                        Ensure your backend is running and has access to the selected file and FFmpeg. This tool only generates the command; executing it requires FFmpeg installed on your system and a valid RTMP server.
                                    </p>
                                </>
                            )}

                         </CardContent>
                     </Card>
                 )}
             {/* Removed device tab content */}
              {/* <TabsContent value="device" className="space-y-4 pt-4">
                  <p className="text-sm text-muted-foreground">Functionality to stream directly from your webcam or microphone will be added in a future update.</p>
              </TabsContent> */}
         {/* Removed closing Tabs tag */}
         {/* </Tabs> */}


        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

        {/* OutputMediaPlayer component is less relevant for streaming, but keep for consistency */}
        {/* <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} /> */}

      </div>
    </MainLayout>
  );
};

export default LiveStreamManager;