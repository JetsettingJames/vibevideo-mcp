import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay"; // Added back
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider"; // Assuming Slider is available
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"; // For filter type
import { Button } from "@/components/ui/button"; // Import Button
import { Loader2 } from "lucide-react"; // Import Loader2 icon
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor"; // Import the new hook
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer"; // Import the new component
import { toast } from "sonner"; // Import toast
import type { SingleFileCommandPayload } from "@/hooks/useFFmpegProcessor"; // Import payload type


const NoiseReducer = () => {
  // Use the new hook
  const {
    selectedFiles, // Keep selectedFiles from hook for UI logic
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    outputFile,
    isUploading,
    isProcessing,
    mediaError,
    generatedCommand, // Get the generated command from the hook
    handleFileSelect, // Use the hook's file select handler
    runCommand, // Use the hook's run command handler
    setCommand, // Use the hook's set command function
    setMediaError, // Pass the hook's setMediaError to the player
    uploadSingleFile, // Import the explicit upload function
  } = useFFmpegProcessor();

  const [filterType, setFilterType] = useState<string>("hqdn3d"); // Default filter
  const [strength, setStrength] = useState<number[]>([50]); // Default strength 0.5 (maps to filter params)

  const filterOptions = [
    { label: "hqdn3d (High Quality 3D Denoising)", value: "hqdn3d" },
    { label: "nlmeans (Non-local Means)", value: "nlmeans" },
    // Add more filters like dctdnoiz, denoise_vaapi, etc. if needed
  ];

  // Effect to generate command string for display whenever selectedFiles, filterType, or strength changes
  // This command string uses the *local* file name for display purposes.
  useEffect(() => {
      if (selectedFiles.length === 1 && filterType) {
          generateDisplayCommandString(selectedFiles[0].name, filterType, strength[0] / 100);
      } else {
          setCommand(""); // Clear command if requirements aren't met
      }
  }, [selectedFiles, filterType, strength, setCommand]); // Add setCommand to dependencies


  const handleFilterTypeChange = (value: string) => {
      setFilterType(value);
      // Command will be regenerated by the useEffect hook
  }

  const handleStrengthChange = (value: number[]) => {
    setStrength(value);
    // Command will be regenerated by the useEffect hook
  };

  // Function to generate the command string for display (used by useEffect)
  // This uses the *local* file name for display purposes.
  const generateDisplayCommandString = (inputFilename: string, type: string, strengthValue: number) => {
    if (!inputFilename || !type) {
      return ""; // Return empty string if command cannot be generated
    }

    const baseName = inputFilename.split('.')[0];
    const outputFileName = `${baseName}_denoised.${inputFilename.split('.').pop()}`; // Simple output naming

    let filter = "";
    // Map strength slider (0-1) to filter parameters (example mapping)
    const mappedStrength = strengthValue * 10; // Map 0-1 to 0-10 for hqdn3d/nlmeans

    switch (type) {
        case "hqdn3d":
            // hqdn3d=luma_spatial:chroma_spatial:luma_tmp:chroma_tmp
            // Apply same strength to all for simplicity
            filter = `hqdn3d=${mappedStrength.toFixed(2)}:${mappedStrength.toFixed(2)}:${mappedStrength.toFixed(2)}:${mappedStrength.toFixed(2)}`;
            break;
        case "nlmeans":
             // nlmeans=s=strength:p=patch_size:pc=patch_complexity:f=filter_size:c=colors
             // Basic example with strength, default patch/filter size
             filter = `nlmeans=s=${mappedStrength.toFixed(2)}`;
             break;
        default:
            setCommand("");
            return "";
    }


    // Use -vf for video filters
    // const command = `ffmpeg -i "${inputFilename}" -vf "${filter}" -c:a copy "${outputFile}"`; // Copy audio stream
  const command = `ffmpeg -i "${inputFilename}" -vf "${filter}" -c:a copy "${outputFileName}"`;

    setCommand(command); // Set the command using the hook's function
    return command; // Return the generated command string
  };

  // New handler for the Run button
  const handleRunClick = async () => {
      if (selectedFiles.length === 0) {
          toast.warning("Please select a file first.");
          return;
      }
      if (selectedFiles.length > 1) {
          toast.warning("Noise Reduction currently only supports a single file. Please select only one file.");
          return;
      }
      if (!filterType) {
          toast.warning("Please select a filter type.");
          return;
      }

      // Explicitly trigger single file upload
      const uploadedFile = await uploadSingleFile(selectedFiles[0]);

      if (uploadedFile) {
          // Construct the actual command payload using the *uploaded* filename
          const actualCommand = generateDisplayCommandString(uploadedFile, filterType, strength[0] / 100); // Reuse logic, but pass uploadedFile

          const payload: SingleFileCommandPayload = {
              command: actualCommand,
              inputFile: uploadedFile, // Use the uploaded filename
          };
          runCommand(payload); // Run the command via the hook
      }
  };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Video Noise Reduction</h2>
        <p className="text-muted-foreground">Apply filters to reduce noise and grain in video footage.</p>

        {/* Use the hook's file select handler */}
        <FileUploader onFileSelect={handleFileSelect} />

        {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Noise Reduction Options</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">

               {isUploading && (
                   <p className="text-sm text-blue-600">Uploading file...</p>
               )}

               {/* Render options only after initial file selection and not uploading */}
               {!isUploading && selectedFiles.length > 0 && (
                   <>
                       {/* Display selected files */}
                       <div>
                           <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                           <ul>
                               {selectedFiles.map((file, index) => (
                                   <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                               ))}
                           </ul>
                       </div>

                       {selectedFiles.length > 1 && (
                           <p className="text-sm text-yellow-600">Note: Noise reduction currently only applies to the first selected file.</p>
                       )}

                       <div className="grid w-full max-w-sm items-center gap-1.5">
                         <Label htmlFor="filter-type-select">Filter Type</Label>
                         <Select onValueChange={handleFilterTypeChange} value={filterType} disabled={isProcessing || isUploading}>
                           <SelectTrigger id="filter-type-select">
                             <SelectValue placeholder="Select filter" />
                           </SelectTrigger>
                           <SelectContent>
                             {filterOptions.map(option => (
                               <SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>
                             ))}
                           </SelectContent>
                         </Select>
                       </div>

                       <div className="grid w-full max-w-sm items-center gap-1.5">
                         <Label htmlFor="strength-slider">Strength ({strength[0] / 100})</Label>
                         <Slider
                           id="strength-slider"
                           min={0}
                           max={100}
                           step={1}
                           value={strength}
                           onValueChange={handleStrengthChange}
                           className="w-full max-w-sm"
                           disabled={isProcessing || isUploading}
                         />
                         <p className="text-sm text-muted-foreground">Adjusts the intensity of the noise reduction effect.</p>
                       </div>

                       {/* Run Button - uses the new handleRunClick */}
                       <Button
                           onClick={handleRunClick} // Use the new handler
                           disabled={!filterType || selectedFiles.length === 0 || isProcessing || isUploading} // Disable if options not selected, no file, processing, or uploading
                       >
                           {isProcessing ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Processing...
                               </>
                           ) : isUploading ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Uploading...
                               </>
                           ) : (
                               "Run Reduction"
                           )}
                       </Button>
                       <p className="text-sm text-yellow-600">
                           Note: Clicking "Run" will first upload the selected file and then send the command to your local backend server running on http://localhost:8200.
                           Ensure your backend is running and has access to the selected file.
                       </p>
                       <p className="text-sm text-yellow-600">
                           Note: Different filters have different parameters and performance characteristics. You may need to experiment to find the best result.
                       </p>
                   </>
               )}

            </CardContent>
          </Card>
        )}

        {/* Use the new OutputMediaPlayer component */}
        <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} />

        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

      </div>
    </MainLayout>
  );
};

export default NoiseReducer;