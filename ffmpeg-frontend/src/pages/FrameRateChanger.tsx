import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay"; // Added back
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button"; // Import Button
import { Loader2 } from "lucide-react"; // Import Loader2 icon
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor"; // Import the new hook
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer"; // Import the new component
import { toast } from "sonner"; // Import toast
import type { SingleFileCommandPayload } from "@/hooks/useFFmpegProcessor"; // Import payload type


const FrameRateChanger = () => {
  // Use the new hook
  const {
    selectedFiles, // Keep selectedFiles from hook for UI logic
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    outputFile,
    isUploading,
    isProcessing,
    mediaError,
    generatedCommand, // Get the generated command from the hook
    handleFileSelect, // Use the hook's file select handler
    runCommand, // Use the hook's run command handler
    setCommand, // Use the hook's set command function
    setMediaError, // Pass the hook's setMediaError to the player
    uploadSingleFile, // Import the explicit upload function
  } = useFFmpegProcessor();

  const [frameRate, setFrameRate] = useState<string>("");
  const frameRateOptions = ["24", "25", "30", "48", "50", "60"];

  // Effect to generate command string for display whenever selectedFiles or frameRate changes
  // This command string uses the *local* file name for display purposes.
  useEffect(() => {
      if (selectedFiles.length === 1 && frameRate) {
          generateDisplayCommandString(selectedFiles[0].name, frameRate);
      } else {
          setCommand(""); // Clear command if requirements aren't met
      }
  }, [selectedFiles, frameRate, setCommand]); // Add setCommand to dependencies


  const handleFrameRateChange = (value: string) => {
    setFrameRate(value);
    // Command will be regenerated by the useEffect hook
  };

  // Function to generate the command string for display (used by useEffect)
  // This uses the *local* file name for display purposes.
  const generateDisplayCommandString = (inputFilename: string, fps: string) => {
    if (!inputFilename || !fps) {
      return ""; // Return empty string if command cannot be generated
    }

    // Basic command generation (single file for now)
    const outputFile = `${inputFilename.split('.')[0]}_${fps}fps.${inputFilename.split('.').pop()}`; // Simple output naming

    // Use -r option for frame rate
    // Using stream copy for speed might not work if changing frame rate significantly.
    // Re-encoding is often required for smooth results. Using libx264/aac for browser compatibility.
    const command = `ffmpeg -i "${inputFilename}" -r ${fps} -c:v libx264 -c:a aac -strict experimental "${outputFile}"`;

    setCommand(command); // Set the command using the hook's function
    return command; // Return the generated command string
  };

  // New handler for the Run button
  const handleRunClick = async () => {
      if (selectedFiles.length === 0) {
          toast.warning("Please select a file first.");
          return;
      }
      if (selectedFiles.length > 1) {
          toast.warning("Frame Rate Adjustment currently only supports a single file. Please select only one file.");
          return;
      }
      if (!frameRate) {
          toast.warning("Please select a frame rate.");
          return;
      }

      // Explicitly trigger single file upload
      const uploadedFile = await uploadSingleFile(selectedFiles[0]);

      if (uploadedFile) {
          // Construct the actual command payload using the *uploaded* filename
          const actualCommand = generateDisplayCommandString(uploadedFile, frameRate); // Reuse logic, but pass uploadedFile

          const payload: SingleFileCommandPayload = {
              command: actualCommand,
              inputFile: uploadedFile, // Use the uploaded filename
          };
          runCommand(payload); // Run the command via the hook
      }
  };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Frame Rate Adjustment</h2>
        <p className="text-muted-foreground">Modify the frame rate of a video.</p>

        {/* Use the hook's file select handler */}
        <FileUploader onFileSelect={handleFileSelect} />

        {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Frame Rate Options</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">

               {isUploading && (
                   <p className="text-sm text-blue-600">Uploading file...</p>
               )}

               {/* Render options only after initial file selection and not uploading */}
               {!isUploading && selectedFiles.length > 0 && (
                   <>
                       {/* Display selected files */}
                       <div>
                           <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                           <ul>
                               {selectedFiles.map((file, index) => (
                                   <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                               ))}
                           </ul>
                       </div>

                       {selectedFiles.length > 1 && (
                           <p className="text-sm text-yellow-600">Note: Frame Rate Adjustment currently only supports a single file. Only the first file will be processed.</p>
                       )}

                       <div className="grid w-full max-w-sm items-center gap-1.5">
                         <Label htmlFor="framerate-select">Frame Rate (FPS)</Label>
                         <Select onValueChange={handleFrameRateChange} value={frameRate} disabled={isProcessing || isUploading}>
                           <SelectTrigger id="framerate-select">
                             <SelectValue placeholder="Select frame rate" />
                           </SelectTrigger>
                           <SelectContent>
                             {frameRateOptions.map(rate => (
                               <SelectItem key={rate} value={rate}>{rate} FPS</SelectItem>
                             ))}
                           </SelectContent>
                         </Select>
                       </div>
                        <p className="text-sm text-yellow-600">
                            Note: Changing frame rate often requires re-encoding the video stream for smooth results.
                        </p>

                       {/* Run Button - uses the new handleRunClick */}
                       <Button
                           onClick={handleRunClick} // Use the new handler
                           disabled={!frameRate || selectedFiles.length === 0 || isProcessing || isUploading} // Disable if no frame rate, no file, processing, or uploading
                       >
                           {isProcessing ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Processing...
                               </>
                           ) : isUploading ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Uploading...
                               </>
                           ) : (
                               "Run Adjustment"
                           )}
                       </Button>
                       <p className="text-sm text-yellow-600">
                           Note: Clicking "Run" will first upload the selected file and then send the command to your local backend server running on http://localhost:8200.
                           Ensure your backend is running and has access to the selected file.
                       </p>
                   </>
               )}

            </CardContent>
          </Card>
        )}

        {/* Use the new OutputMediaPlayer component */}
        <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} />

        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

      </div>
    </MainLayout>
  );
};

export default FrameRateChanger;