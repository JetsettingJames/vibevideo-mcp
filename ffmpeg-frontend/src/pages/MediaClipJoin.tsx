import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor";
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer";
import { toast } from "sonner";
import type { SingleFileCommandPayload, JoinOperationPayload } from "@/hooks/useFFmpegProcessor";


const MediaClipJoin = () => {
  const {
    selectedFiles,
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    uploadedFilenamesForJoin, // Keep for potential display/debugging
    outputFile,
    isUploading,
    isProcessing,
    mediaError,
    generatedCommand, // Command string (primarily for single-file display)
    handleFileSelect,
    uploadSingleFile, // Explicitly upload a single file
    uploadFilesForJoin, // Explicitly upload multiple files for join
    runCommand, // Run command with flexible payload
    setCommand, // Set generated command string (for display)
    setMediaError,
  } = useFFmpegProcessor();

  const [startTime, setStartTime] = useState<string>("");
  const [endTime, setEndTime] = useState<string>("");
  const [activeTab, setActiveTab] = useState<"trim" | "join">("trim");

  // Effect to set default tab based on number of selected files and clear states
  useEffect(() => {
      if (selectedFiles.length > 1) {
          setActiveTab("join");
      } else {
          setActiveTab("trim");
      }
      // Clear options when files change
      setStartTime("");
      setEndTime("");
      setCommand(""); // Clear command display
      setMediaError(false); // Reset media error
  }, [selectedFiles, setCommand, setMediaError]);


  // Effect to generate command string for display (primarily for Trim)
  // For Join, we show a placeholder message.
  useEffect(() => {
      if (activeTab === "trim") {
          // Generate command string only if a file is selected and times are entered
          if (selectedFiles.length === 1 && (startTime || endTime)) {
              // Use the *local* selected file name for display command
              // The actual command sent to backend will use the *uploaded* filename
              generateTrimCommandString(selectedFiles[0].name, startTime, endTime);
          } else {
              setCommand(""); // Clear command string if requirements aren't met
          }
      } else { // activeTab === "join"
          if (selectedFiles.length >= 2) {
               // Show an example command for joining MP4s using concat demuxer
               const exampleCommand = `ffmpeg -y -f concat -safe 0 -i file_list.txt -c:v libx264 -c:a aac -movflags +faststart output.mp4`;
               setCommand(`Example Join Command (Backend Handles File List):\n${exampleCommand}\n\nNote: The backend will generate the actual file_list.txt and run a command similar to this.`);
          } else {
               setCommand("Select at least two files for joining.");
          }
      }
  }, [selectedFiles, startTime, endTime, activeTab, setCommand]);


  const handleTrimTimeChange = (start: string, end: string) => {
    setStartTime(start);
    setEndTime(end);
    // Command will be regenerated by the useEffect hook for display
  };

  const handleTabChange = (value: "trim" | "join") => {
       if (isUploading || isProcessing) {
           toast.warning("Cannot switch tabs while processing or uploading.");
           return;
       }
       setActiveTab(value);
       // Clear options when switching tabs
       setStartTime("");
       setEndTime("");
       setMediaError(false); // Reset media error
       // Command will be regenerated by the useEffect hook
   }


  // Function to generate the command string for display (used by useEffect for Trim)
  // This uses the *local* file name for display purposes.
  const generateTrimCommandString = (inputFilename: string, start: string, end: string) => {
    if (!inputFilename || (!start && !end)) {
      setCommand("");
      return ""; // Return empty string if command cannot be generated
    }

    const outputFile = `${inputFilename.split('.')[0]}_trimmed.${inputFilename.split('.').pop()}`; // Simple output naming

    let command = `ffmpeg -i "${inputFilename}"`;
    if (start) {
      command += ` -ss ${start}`;
    }
    if (end) {
      command += ` -to ${end}`;
    }
    command += ` -c copy "${outputFile}"`; // Using stream copy for speed and quality

    setCommand(command); // Set the command using the hook's function
    return command; // Return the generated command string
  };

   // Function to handle running the command based on the active tab
   const handleRunClick = async () => {
       if (selectedFiles.length === 0) {
           toast.warning("Please select file(s) first.");
           return;
       }

       if (activeTab === 'trim') {
           if (selectedFiles.length > 1) {
               toast.warning("Trimming only supports a single file. Please select only one file.");
               return;
           }
           if (!startTime && !endTime) {
               toast.warning("Please specify a start or end time for trimming.");
               return;
           }

           // Trigger single file upload
           const uploadedFile = await uploadSingleFile(selectedFiles[0]);

           if (uploadedFile) {
               // Generate command string using the *uploaded* filename for the backend
               const trimCommand = `ffmpeg -i "${uploadedFile}" ${startTime ? `-ss ${startTime}` : ''} ${endTime ? `-to ${endTime}` : ''} -c copy "${uploadedFile.split('.')[0]}_trimmed.${uploadedFile.split('.').pop()}"`;

               // Create and run the command payload
               const payload: SingleFileCommandPayload = {
                   command: trimCommand,
                   inputFile: uploadedFile, // Use the uploaded filename
               };
               runCommand(payload);
           }

       } else { // activeTab === 'join'
           if (selectedFiles.length < 2) {
               toast.warning("Joining requires at least two files. Please select multiple files.");
               return;
           }

           // Trigger multi-file upload
           const uploadedNames = await uploadFilesForJoin(selectedFiles);

           if (uploadedNames && uploadedNames.length >= 2) {
                // Create a temporary file list for FFmpeg concat demuxer
                // This requires backend support to create the file list on the server
                // The payload tells the backend *what* operation to perform and *which* files to use
                const outputFileName = `joined_output.mp4`; // Suggest MP4 output for compatibility

                const payload: JoinOperationPayload = {
                    operation: "join", // Indicate join operation
                    filenames: uploadedNames, // Provide the list of uploaded filenames
                    output: outputFileName, // Suggest the output filename
                };
                // The backend is expected to construct the FFmpeg command using concat demuxer
                // and the specified output format/codecs based on this payload.
                runCommand(payload);
           } else if (uploadedNames && uploadedNames.length < 2) {
                toast.error("Multi-file upload failed or returned less than 2 files.");
           }
       }
   };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Clipper & Joiner</h2>
        <p className="text-muted-foreground">Trim sections from a media file or concatenate multiple files.</p>

        {/* Use the hook's file select handler - it now ONLY updates selectedFiles */}
        <FileUploader onFileSelect={handleFileSelect} />

        {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
          <Card className="w-full">
            <CardHeader>
              <CardTitle>{activeTab === 'trim' ? 'Trimming Options' : 'Joining Options'}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">

                {isUploading && (
                    <p className="text-sm text-blue-600">Uploading file(s)...</p>
                )}

                {/* Render options only after initial file selection and not uploading */}
                {!isUploading && selectedFiles.length > 0 && (
                    <>
                        {/* Display selected files */}
                        <div>
                            <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                            <ul>
                                {selectedFiles.map((file, index) => (
                                    <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                                ))}
                            </ul>
                        </div>


                        <Tabs value={activeTab} onValueChange={(value: "trim" | "join") => handleTabChange(value)} className="w-full">
                            <TabsList className="grid w-full grid-cols-2">
                                <TabsTrigger value="trim" disabled={isUploading || isProcessing}>Trim</TabsTrigger>
                                <TabsTrigger value="join" disabled={isUploading || isProcessing}>Join</TabsTrigger>
                            </TabsList>
                            <TabsContent value="trim" className="space-y-4 pt-4">
                                <p className="text-sm text-muted-foreground">Specify start and end times to cut a section from the selected file.</p>
                                {selectedFiles.length > 1 && (
                                     <p className="text-sm text-yellow-600">Note: Trimming only applies to the first selected file when multiple are selected.</p>
                                 )}
                                <div className="flex space-x-4 w-full max-w-md">
                                    <div className="grid gap-1.5 w-1/2">
                                        <Label htmlFor="start-time">Start Time (e.g., 00:00:10)</Label>
                                        <Input
                                            id="start-time"
                                            type="text"
                                            placeholder="HH:MM:SS or seconds"
                                            value={startTime}
                                            onChange={(e) => handleTrimTimeChange(e.target.value, endTime)}
                                            disabled={isUploading || isProcessing}
                                        />
                                    </div>
                                    <div className="grid gap-1.5 w-1/2">
                                        <Label htmlFor="end-time">End Time (e.g., 00:00:25)</Label>
                                        <Input
                                            id="end-time"
                                            type="text"
                                            placeholder="HH:MM:SS or seconds"
                                            value={endTime}
                                            onChange={(e) => handleTrimTimeChange(startTime, e.target.value)}
                                            disabled={isUploading || isProcessing}
                                        />
                                    </div>
                                </div>
                            </TabsContent>
                            <TabsContent value="join" className="space-y-4 pt-4">
                                 <p className="text-sm text-muted-foreground">Select multiple files above to concatenate them. Files must have the same codecs and parameters for simple stream copy joining.</p>

                                 {selectedFiles.length < 2 && (
                                     <p className="text-sm text-yellow-600 mt-2">Select at least two files to enable joining.</p>
                                 )}

                                 {/* TODO: Add UI for reordering files */}

                                 <p className="text-sm text-yellow-600">
                                     Note: Files must have compatible codecs and parameters for simple stream copy joining. For maximum browser compatibility, the output will be MP4 (H.264/AAC).
                                 </p>
                            </TabsContent>
                        </Tabs>

                        {/* Run Button - uses the new handleRunClick */}
                        <Button
                            onClick={handleRunClick} // Use the new handler
                            disabled={
                                isProcessing ||
                                isUploading ||
                                (activeTab === 'trim' && (selectedFiles.length === 0 || (!startTime && !endTime))) || // Disable trim if no file or no times
                                (activeTab === 'join' && selectedFiles.length < 2) // Disable join if less than 2 files selected
                            }
                        >
                            {isProcessing ? (
                                <>
                                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                    Processing...
                                </>
                            ) : isUploading ? (
                                <>
                                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                    Uploading...
                                </>
                            ) : (
                                `Run ${activeTab === 'trim' ? 'Trim' : 'Join'}`
                            )}
                        </Button>
                        <p className="text-sm text-yellow-600">
                            Note: Clicking "Run" will first upload the selected file(s) and then send the command/operation details to your local backend server running on http://localhost:8200.
                            Ensure your backend is running and has access to the selected file(s).
                        </p>
                    </>
                )}

            </CardContent>
          </Card>
        )}

        {/* Use the new OutputMediaPlayer component */}
        <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} />

        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

      </div>
    </MainLayout>
  );
};

export default MediaClipJoin;