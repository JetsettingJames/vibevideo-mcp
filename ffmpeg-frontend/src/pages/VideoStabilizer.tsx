import { useState, useEffect } from "react";
import { MainLayout } from "@/components/layout/MainLayout";
import FileUploader from "@/components/shared/FileUploader";
import FFmpegCommandDisplay from "@/components/shared/FFmpegCommandDisplay"; // Added back
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button"; // Import Button
import { Loader2 } from "lucide-react"; // Import Loader2 icon
import { useFFmpegProcessor } from "@/hooks/useFFmpegProcessor"; // Import the new hook
import OutputMediaPlayer from "@/components/shared/OutputMediaPlayer"; // Import the new component
import { toast } from "sonner"; // Import toast
import type { SingleFileCommandPayload } from "@/hooks/useFFmpegProcessor"; // Import payload type


const VideoStabilizer = () => {
  // Use the new hook
  const {
    selectedFiles, // Keep selectedFiles from hook for UI logic
    uploadedFilename, // Keep for potential display/debugging, but logic relies on return values from upload functions
    outputFile,
    isUploading,
    isProcessing,
    mediaError,
    generatedCommand, // Get the generated command from the hook
    handleFileSelect, // Use the hook's file select handler
    runCommand, // Use the hook's run command handler
    setCommand, // Use the hook's set command function
    setMediaError, // Pass the hook's setMediaError to the player
    uploadSingleFile, // Import the explicit upload function
  } = useFFmpegProcessor();

  const [stabilizationStrength, setStabilizationStrength] = useState<string>("medium"); // Placeholder for strength

  // Placeholder strength options - map to potential filter parameters later
  const strengthOptions = [
    { label: "None", value: "none" },
    { label: "Low", value: "low" },
    { label: "Medium", value: "medium" },
    { label: "High", value: "high" },
  ];

  // Effect to generate command string for display whenever selectedFiles or stabilizationStrength changes
  // This command string uses the *local* file name for display purposes.
  useEffect(() => {
      if (selectedFiles.length === 1 && stabilizationStrength && stabilizationStrength !== "none") {
          // Pass the strength value (e.g., "medium") to the command generator
          generateDisplayCommandString(selectedFiles[0].name, stabilizationStrength);
      } else {
          setCommand(""); // Clear command if requirements aren't met
      }
  }, [selectedFiles, stabilizationStrength, setCommand]); // Add setCommand to dependencies


  const handleStrengthChange = (value: string) => {
    setStabilizationStrength(value);
    // Command will be regenerated by the useEffect hook
  };

  // Function to generate the command string for display (used by useEffect)
  // This uses the *local* file name for display purposes.
  const generateDisplayCommandString = (inputFilename: string, strength: string) => {
    if (!inputFilename || strength === "none") {
      return ""; // Return empty string if command cannot be generated
    }

    const baseName = inputFilename.split('.')[0];
    const outputFileName = `${baseName}_stabilized.${inputFilename.split('.').pop()}`; // Simple output naming

    // FFmpeg stabilization is typically a two-pass process:
    // Pass 1: Detect camera movements and write to a log file
    // Pass 2: Apply stabilization based on the log file

    // Simplified command generation for display - shows both steps
    // In a real application, you'd guide the user to run these sequentially.

    // Placeholder parameters based on strength (these are simplified examples)
    let detectParams = "";
    let transformParams = "";

    switch (strength) {
        case "low":
            detectParams = "shakiness=5:accuracy=5";
            transformParams = "smoothing=5";
            break;
        case "medium":
            detectParams = "shakiness=8:accuracy=8";
            transformParams = "smoothing=10";
            break;
        case "high":
            detectParams = "shakiness=10:accuracy=10";
            transformParams = "smoothing=20";
            break;
        default:
            setCommand("");
            return ""; // Should not happen with valid strength
    }

    const command1 = `ffmpeg -i "${inputFilename}" -vf "vidstabdetect=${detectParams}" -f null -`;
    const command2 = `ffmpeg -i "${inputFilename}" -vf "vidstabtransform=${transformParams}" -c:a copy "${outputFileName}"`;

    // Display both commands, indicating the two steps
    setCommand(`## Step 1: Analyze (creates vidstab.log)\n${command1}\n\n## Step 2: Stabilize (uses vidstab.log)\n${command2}`);
    return `## Step 1: Analyze (creates vidstab.log)\n${command1}\n\n## Step 2: Stabilize (uses vidstab.log)\n${command2}`; // Return the generated command string
  };

  // New handler for the Run button
  const handleRunClick = async () => {
      if (selectedFiles.length === 0) {
          toast.warning("Please select a file first.");
          return;
      }
      if (selectedFiles.length > 1) {
          toast.warning("Video Stabilization currently only supports a single file. Please select only one file.");
          return;
      }
      if (!stabilizationStrength || stabilizationStrength === "none") {
          toast.warning("Please select a stabilization strength.");
          return;
      }

      // Explicitly trigger single file upload
      const uploadedFile = await uploadSingleFile(selectedFiles[0]);

      if (uploadedFile) {
          // Construct the actual command payload using the *uploaded* filename
          // Note: Stabilization is a two-step process. We'll generate the commands
          // for the backend, but the user needs to run them sequentially.
          // The backend would need to support running multiple commands or a script.
          // For simplicity, we'll send the commands as a single string for display,
          // but the backend would need to parse and run them correctly.
          // A better approach might be to have separate "Analyze" and "Stabilize" buttons.
          // For now, we'll send the commands as a single payload, assuming backend can handle it.

          // Placeholder parameters based on strength (these are simplified examples)
          let detectParams = "";
          let transformParams = "";

          switch (stabilizationStrength) {
              case "low":
                  detectParams = "shakiness=5:accuracy=5";
                  transformParams = "smoothing=5";
                  break;
              case "medium":
                  detectParams = "shakiness=8:accuracy=8";
                  transformParams = "smoothing=10";
                  break;
              case "high":
                  detectParams = "shakiness=10:accuracy=10";
                  transformParams = "smoothing=20";
                  break;
              default:
                  toast.error("Invalid stabilization strength selected.");
                  return;
          }

          const command1 = `ffmpeg -i "${uploadedFile}" -vf "vidstabdetect=${detectParams}" -f null -`;
          const command2 = `ffmpeg -i "${uploadedFile}" -vf "vidstabtransform=${transformParams}" -c:a copy "${uploadedFile.split('.')[0]}_stabilized.${uploadedFile.split('.').pop()}"`;

          // Send both commands as a single string or structured payload to the backend
          // For now, sending as a single string for simplicity, backend needs to handle it.
          const actualCommand = `## Step 1: Analyze (creates vidstab.log)\n${command1}\n\n## Step 2: Stabilize (uses vidstab.log)\n${command2}`;


          const payload: any = {
            operation: "stabilize", // 
            command: actualCommand, // Send the combined command string
            inputFile: uploadedFile, // Use the uploaded filename
          };
          // Note: The backend needs to be able to execute multi-line commands or scripts for this to work correctly.
          runCommand(payload); // Run the command via the hook
      }
  };


  return (
    <MainLayout>
      <div className="flex-1 space-y-4 p-8 pt-6">
        <h2 className="text-3xl font-bold tracking-tight">Video Stabilization</h2>
        <p className="text-muted-foreground">Generate FFmpeg commands to stabilize shaky video footage.</p>

        {/* Use the hook's file select handler */}
        <FileUploader onFileSelect={handleFileSelect} />

        {selectedFiles.length > 0 && ( // Use hook's selectedFiles for UI visibility
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Stabilization Options</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">

               {isUploading && (
                   <p className="text-sm text-blue-600">Uploading file...</p>
               )}

               {/* Render options only after initial file selection and not uploading */}
               {!isUploading && selectedFiles.length > 0 && (
                   <>
                       {/* Display selected files */}
                       <div>
                           <h4 className="text-md font-semibold mb-2">Selected File(s):</h4>
                           <ul>
                               {selectedFiles.map((file, index) => (
                                   <li key={index} className="text-sm text-muted-foreground">{file.name}</li>
                               ))}
                           </ul>
                       </div>

                       {selectedFiles.length > 1 && (
                           <p className="text-sm text-yellow-600">Note: Stabilization currently only applies to the first selected file.</p>
                       )}

                       <div className="grid w-full max-w-sm items-center gap-1.5">
                         <Label htmlFor="strength-select">Stabilization Strength</Label>
                         <Select onValueChange={handleStrengthChange} value={stabilizationStrength} disabled={isProcessing || isUploading}>
                           <SelectTrigger id="strength-select">
                             <SelectValue placeholder="Select strength" />
                           </SelectTrigger>
                           <SelectContent>
                             {strengthOptions.map(option => (
                               <SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>
                             ))}
                           </SelectContent>
                         </Select>
                       </div>
                       <p className="text-sm text-yellow-600">
                           Note: Video stabilization with FFmpeg is a two-pass process. You must run the first command to generate a log file (`vidstab.log`) before running the second command. The generated commands are basic examples; advanced tuning of `vidstabdetect` and `vidstabtransform` filters may be required for optimal results.
                       </p>

                       {/* Run Button - uses the new handleRunClick */}
                       <Button
                           onClick={handleRunClick} // Use the new handler
                           disabled={!stabilizationStrength || stabilizationStrength === "none" || selectedFiles.length === 0 || isProcessing || isUploading} // Disable if options not selected, no file, processing, or uploading
                       >
                           {isProcessing ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Processing...
                               </>
                           ) : isUploading ? (
                               <>
                                   <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                   Uploading...
                               </>
                           ) : (
                               "Run Stabilization"
                           )}
                       </Button>
                       <p className="text-sm text-yellow-600">
                           Note: Clicking "Run" will first upload the selected file and then send the command(s) to your local backend server running on http://localhost:8200.
                           Ensure your backend is running and has access to the selected file and FFmpeg.
                       </p>
                   </>
               )}

            </CardContent>
          </Card>
        )}

        {/* Use the new OutputMediaPlayer component */}
        <OutputMediaPlayer outputFile={outputFile} mediaError={mediaError} setMediaError={setMediaError} />

        {/* FFmpegCommandDisplay component is now added back */}
        <FFmpegCommandDisplay command={generatedCommand} />

      </div>
    </MainLayout>
  );
};

export default VideoStabilizer;